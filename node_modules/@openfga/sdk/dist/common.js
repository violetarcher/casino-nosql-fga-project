"use strict";
/**
 * JavaScript and Node.js SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://openfga.dev/community
 * License: [Apache-2.0](https://github.com/openfga/js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFunction = exports.attemptHttpRequest = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setBearerAuthToObject = exports.DUMMY_BASE_URL = void 0;
const credentials_1 = require("./credentials");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = "https://example.com";
/**
 *
 * @export
 */
const setBearerAuthToObject = function (object, credentials) {
    return __awaiter(this, void 0, void 0, function* () {
        const accessTokenHeader = yield credentials.getAccessTokenHeader();
        if (accessTokenHeader && !object[accessTokenHeader.name]) {
            object[accessTokenHeader.name] = accessTokenHeader.value;
        }
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
/**
 *
 * @export
 */
const setSearchParams = function (url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    for (const object of objects) {
        for (const key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (const item of object[key]) {
                    searchParams.append(key, item);
                }
            }
            else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
* Check if the given MIME is a JSON MIME.
* JSON MIME examples:
*   application/json
*   application/json; charset=UTF8
*   APPLICATION/JSON
*   application/vnd.company+json
* @param mime - MIME (Multipurpose Internet Mail Extensions)
* @return True if the given MIME is JSON, false otherwise.
*/
const isJsonMime = (mime) => {
    // eslint-disable-next-line no-control-regex
    const jsonMime = new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$", "i");
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
};
/**
 *
 * @export
 */
const serializeDataIfNeeded = function (value, requestOptions) {
    const nonString = typeof value !== "string";
    const needsSerialization = nonString
        ? isJsonMime(requestOptions.headers["Content-Type"])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
const toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
exports.toPathString = toPathString;
/**
 * Returns true if this error is returned from axios
 * source: https://github.com/axios/axios/blob/21a5ad34c4a5956d81d338059ac0dd34a19ed094/lib/helpers/isAxiosError.js#L12
 * @param err
 */
function isAxiosError(err) {
    return err && typeof err === "object" && err.isAxiosError === true;
}
function randomTime(loopCount, minWaitInMs) {
    const min = Math.ceil(Math.pow(2, loopCount) * minWaitInMs);
    const max = Math.ceil(Math.pow(2, (loopCount + 1)) * minWaitInMs);
    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}
function attemptHttpRequest(request, config, axiosInstance) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        let iterationCount = 0;
        do {
            iterationCount++;
            try {
                return yield axiosInstance(request);
            }
            catch (err) {
                if (!isAxiosError(err)) {
                    throw new errors_1.FgaError(err);
                }
                const status = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status;
                if (status === 400 || status === 422) {
                    throw new errors_1.FgaApiValidationError(err);
                }
                else if (status === 401 || status === 403) {
                    throw new errors_1.FgaApiAuthenticationError(err);
                }
                else if (status === 404) {
                    throw new errors_1.FgaApiNotFoundError(err);
                }
                else if (status === 429 || status >= 500) {
                    if (iterationCount >= config.maxRetry) {
                        // We have reached the max retry limit
                        // Thus, we have no choice but to throw
                        if (status === 429) {
                            throw new errors_1.FgaApiRateLimitExceededError(err);
                        }
                        else {
                            throw new errors_1.FgaApiInternalError(err);
                        }
                    }
                    yield new Promise(r => setTimeout(r, randomTime(iterationCount, config.minWaitInMs)));
                }
                else {
                    throw new errors_1.FgaApiError(err);
                }
            }
        } while (iterationCount < config.maxRetry + 1);
    });
}
exports.attemptHttpRequest = attemptHttpRequest;
/**
 * creates an axios request function
 */
const createRequestFunction = function (axiosArgs, axiosInstance, configuration, credentials) {
    var _a, _b;
    configuration.isValid();
    const retryParams = ((_a = axiosArgs.options) === null || _a === void 0 ? void 0 : _a.retryParams) ? (_b = axiosArgs.options) === null || _b === void 0 ? void 0 : _b.retryParams : configuration.retryParams;
    const maxRetry = retryParams ? retryParams.maxRetry : 0;
    const minWaitInMs = retryParams ? retryParams.minWaitInMs : 0;
    if (!credentials) {
        credentials = credentials_1.Credentials.init(configuration);
    }
    return (...args_1) => __awaiter(this, [...args_1], void 0, function* (axios = axiosInstance) {
        yield (0, exports.setBearerAuthToObject)(axiosArgs.options.headers, credentials);
        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: configuration.getBasePath() + axiosArgs.url });
        const response = yield attemptHttpRequest(axiosRequestArgs, {
            maxRetry,
            minWaitInMs,
        }, axios);
        const data = typeof (response === null || response === void 0 ? void 0 : response.data) === "undefined" ? {} : response === null || response === void 0 ? void 0 : response.data;
        const result = Object.assign({}, data);
        (0, utils_1.setNotEnumerableProperty)(result, "$response", response);
        return result;
    });
};
exports.createRequestFunction = createRequestFunction;
