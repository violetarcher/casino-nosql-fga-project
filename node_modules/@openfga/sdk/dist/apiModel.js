"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * JavaScript and Node.js SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://openfga.dev/community
 * License: [Apache-2.0](https://github.com/openfga/js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeName = exports.TupleOperation = exports.NullValue = exports.NotFoundErrorCode = exports.InternalErrorCode = exports.ErrorCode = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["NoError"] = "no_error";
    ErrorCode["ValidationError"] = "validation_error";
    ErrorCode["AuthorizationModelNotFound"] = "authorization_model_not_found";
    ErrorCode["AuthorizationModelResolutionTooComplex"] = "authorization_model_resolution_too_complex";
    ErrorCode["InvalidWriteInput"] = "invalid_write_input";
    ErrorCode["CannotAllowDuplicateTuplesInOneRequest"] = "cannot_allow_duplicate_tuples_in_one_request";
    ErrorCode["CannotAllowDuplicateTypesInOneRequest"] = "cannot_allow_duplicate_types_in_one_request";
    ErrorCode["CannotAllowMultipleReferencesToOneRelation"] = "cannot_allow_multiple_references_to_one_relation";
    ErrorCode["InvalidContinuationToken"] = "invalid_continuation_token";
    ErrorCode["InvalidTupleSet"] = "invalid_tuple_set";
    ErrorCode["InvalidCheckInput"] = "invalid_check_input";
    ErrorCode["InvalidExpandInput"] = "invalid_expand_input";
    ErrorCode["UnsupportedUserSet"] = "unsupported_user_set";
    ErrorCode["InvalidObjectFormat"] = "invalid_object_format";
    ErrorCode["WriteFailedDueToInvalidInput"] = "write_failed_due_to_invalid_input";
    ErrorCode["AuthorizationModelAssertionsNotFound"] = "authorization_model_assertions_not_found";
    ErrorCode["LatestAuthorizationModelNotFound"] = "latest_authorization_model_not_found";
    ErrorCode["TypeNotFound"] = "type_not_found";
    ErrorCode["RelationNotFound"] = "relation_not_found";
    ErrorCode["EmptyRelationDefinition"] = "empty_relation_definition";
    ErrorCode["InvalidUser"] = "invalid_user";
    ErrorCode["InvalidTuple"] = "invalid_tuple";
    ErrorCode["UnknownRelation"] = "unknown_relation";
    ErrorCode["StoreIdInvalidLength"] = "store_id_invalid_length";
    ErrorCode["AssertionsTooManyItems"] = "assertions_too_many_items";
    ErrorCode["IdTooLong"] = "id_too_long";
    ErrorCode["AuthorizationModelIdTooLong"] = "authorization_model_id_too_long";
    ErrorCode["TupleKeyValueNotSpecified"] = "tuple_key_value_not_specified";
    ErrorCode["TupleKeysTooManyOrTooFewItems"] = "tuple_keys_too_many_or_too_few_items";
    ErrorCode["PageSizeInvalid"] = "page_size_invalid";
    ErrorCode["ParamMissingValue"] = "param_missing_value";
    ErrorCode["DifferenceBaseMissingValue"] = "difference_base_missing_value";
    ErrorCode["SubtractBaseMissingValue"] = "subtract_base_missing_value";
    ErrorCode["ObjectTooLong"] = "object_too_long";
    ErrorCode["RelationTooLong"] = "relation_too_long";
    ErrorCode["TypeDefinitionsTooFewItems"] = "type_definitions_too_few_items";
    ErrorCode["TypeInvalidLength"] = "type_invalid_length";
    ErrorCode["TypeInvalidPattern"] = "type_invalid_pattern";
    ErrorCode["RelationsTooFewItems"] = "relations_too_few_items";
    ErrorCode["RelationsTooLong"] = "relations_too_long";
    ErrorCode["RelationsInvalidPattern"] = "relations_invalid_pattern";
    ErrorCode["ObjectInvalidPattern"] = "object_invalid_pattern";
    ErrorCode["QueryStringTypeContinuationTokenMismatch"] = "query_string_type_continuation_token_mismatch";
    ErrorCode["ExceededEntityLimit"] = "exceeded_entity_limit";
    ErrorCode["InvalidContextualTuple"] = "invalid_contextual_tuple";
    ErrorCode["DuplicateContextualTuple"] = "duplicate_contextual_tuple";
    ErrorCode["InvalidAuthorizationModel"] = "invalid_authorization_model";
    ErrorCode["UnsupportedSchemaVersion"] = "unsupported_schema_version";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
/**
 *
 * @export
 * @enum {string}
 */
var InternalErrorCode;
(function (InternalErrorCode) {
    InternalErrorCode["NoInternalError"] = "no_internal_error";
    InternalErrorCode["InternalError"] = "internal_error";
    InternalErrorCode["Cancelled"] = "cancelled";
    InternalErrorCode["DeadlineExceeded"] = "deadline_exceeded";
    InternalErrorCode["AlreadyExists"] = "already_exists";
    InternalErrorCode["ResourceExhausted"] = "resource_exhausted";
    InternalErrorCode["FailedPrecondition"] = "failed_precondition";
    InternalErrorCode["Aborted"] = "aborted";
    InternalErrorCode["OutOfRange"] = "out_of_range";
    InternalErrorCode["Unavailable"] = "unavailable";
    InternalErrorCode["DataLoss"] = "data_loss";
})(InternalErrorCode || (exports.InternalErrorCode = InternalErrorCode = {}));
/**
 *
 * @export
 * @enum {string}
 */
var NotFoundErrorCode;
(function (NotFoundErrorCode) {
    NotFoundErrorCode["NoNotFoundError"] = "no_not_found_error";
    NotFoundErrorCode["UndefinedEndpoint"] = "undefined_endpoint";
    NotFoundErrorCode["StoreIdNotFound"] = "store_id_not_found";
    NotFoundErrorCode["Unimplemented"] = "unimplemented";
})(NotFoundErrorCode || (exports.NotFoundErrorCode = NotFoundErrorCode = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.  The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
var NullValue;
(function (NullValue) {
    NullValue["NullValue"] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
/**
 *
 * @export
 * @enum {string}
 */
var TupleOperation;
(function (TupleOperation) {
    TupleOperation["Write"] = "TUPLE_OPERATION_WRITE";
    TupleOperation["Delete"] = "TUPLE_OPERATION_DELETE";
})(TupleOperation || (exports.TupleOperation = TupleOperation = {}));
/**
 *
 * @export
 * @enum {string}
 */
var TypeName;
(function (TypeName) {
    TypeName["Unspecified"] = "TYPE_NAME_UNSPECIFIED";
    TypeName["Any"] = "TYPE_NAME_ANY";
    TypeName["Bool"] = "TYPE_NAME_BOOL";
    TypeName["String"] = "TYPE_NAME_STRING";
    TypeName["Int"] = "TYPE_NAME_INT";
    TypeName["Uint"] = "TYPE_NAME_UINT";
    TypeName["Double"] = "TYPE_NAME_DOUBLE";
    TypeName["Duration"] = "TYPE_NAME_DURATION";
    TypeName["Timestamp"] = "TYPE_NAME_TIMESTAMP";
    TypeName["Map"] = "TYPE_NAME_MAP";
    TypeName["List"] = "TYPE_NAME_LIST";
    TypeName["Ipaddress"] = "TYPE_NAME_IPADDRESS";
})(TypeName || (exports.TypeName = TypeName = {}));
